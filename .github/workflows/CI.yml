name: CI
on:
  push:
    branches:
      - master
      - 'release-*'
    tags:
      - '*'
  pull_request:
    branches:
      - master
env:
  GKSwstype: 100
  JULIA_PKG_PRECOMPILE_AUTO: false
jobs:
  docs:
    name: Documentation
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      - uses: julia-actions/setup-julia@v2
        with:
          version: '1'
      - uses: julia-actions/cache@v2
      - name: "Install Python dependencies"
        run: |
          set -x
          /usr/bin/python3 -m pip install zip-files
      - name: "Instantiate test environment"
        run: |
          wget https://raw.githubusercontent.com/JuliaQuantumControl/JuliaQuantumControl/master/scripts/installorg.jl
          julia --project=test installorg.jl
      - name: "Build documentation"
        run: julia  --threads auto --project=test docs/make.jl
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          DOCUMENTER_KEY: ${{ secrets.DOCUMENTER_KEY }}
      - name: "Zip the HTML documentation"
        run: zip-folder --debug --auto-root --outfile "docs.zip" docs/build
      - uses: actions/upload-artifact@v4
        name: "Upload documentation artifacts"
        with:
          name: QuantumControlBase
          # We need at least two files in the artifact to avoid a weird
          # double-zip file. Hence README.md
          path: |
            README.md
            ./docs.zip
  codestyle:
    name: Codestyle
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: julia-actions/setup-julia@v2
        with:
          version: '1'
      - name: Get codestyle settings
        run: wget https://raw.githubusercontent.com/JuliaQuantumControl/JuliaQuantumControl/master/.JuliaFormatter.toml
      - name: Install JuliaFormatter and format
        # This will use the latest version by default but you can set the version like so:
        #
        # julia  -e 'using Pkg; Pkg.add(PackageSpec(name="JuliaFormatter", version="0.13.0"))'
        run: |
          julia  -e 'using Pkg; Pkg.add(PackageSpec(name="JuliaFormatter"))'
          julia  -e 'using JuliaFormatter; format(".", verbose=true)'
      - name: Format check
        run: |
          julia -e '
          out = Cmd(`git diff --name-only`) |> read |> String
          if out == ""
              exit(0)
          else
              @error "Some files have not been formatted !!!"
              write(stdout, out)
              exit(1)
          end'
